
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from django.shortcuts import render
from django.views.decorators.http import require_http_methods
from curve.utils import SimpleJSON
from member.models import Member
from notification.models import Notification
from datetime import datetime
from models import Post

import logging

logger = logging.getLogger('curve')

@login_required
@require_http_methods
def publish_post(request):
    pass

@login_required
def userposts(request, userid, startid, limit=10):
    """
    Get user's posts which id less than start id with max count (default 10).
    """
    posts = Post.objects.filter(user=userid).filter(id__lte=startid).orderby('createTime')
    html = []
    for post in posts:
        # render post to create html.
        html.append(render(request, '', { 'post': post }))

    return html

@login_required
def recent(request):
    # user = User.objects.get(pk=request.session['userid'])
    member = Member.objects.get(user_id=request.session['userid'])
    posts = []
    post = create_post(member)
    posts.append(post)
    return render(request, 'post/post.html', { 'posts': posts })

def get_inline_reply(request):
    postid = request.get('post')
    return render(request, 'post/inline-reply.html', { 'post': postid })

def create_post(member):
    """ create new post. """
    title = "generated post"
    now = datetime.now()
    content = "This post is generated by server at: " + now.strftime('%b/%d/%Y %H:%M:%S')
    post = Post(id=1, title=title, createTime=now, member=member, content=content)
    # TEST CODE.
    # create notification.
    notification = Notification.objects.create(member.user, member.user, 'Post', 'new post')
    # post notification.
    Notification.objects.add(notification)
    return post

@login_required
@require_http_methods(['POST'])
def create(request):
    for key in request.POST:
        logger.debug('%s: %s', key, request.POST[key])

    result = {}
    result['success'] = True    
    return HttpResponse(SimpleJSON.dumps(result))
